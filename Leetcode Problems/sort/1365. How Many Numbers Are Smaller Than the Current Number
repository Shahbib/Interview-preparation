Problem link : [https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/]
Tag: Easy
Approach 1:brteforce with nestedd loop

Tc = O(n^2)
sc = O(n)

code:
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
     int count = 0;
     vector <int>v;
     for(int i=0;i<nums.size();i++){
        int temp = nums[i];
        for (int j=0;j<nums.size();j++){
            if (nums[j]<temp)
            count++;
        }
        v.push_back(count);
        count = 0;
     }   
     return v;
    }
};
Approach 2: Using map

Tc = O(nlogn)
sc = O(n)

code
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
     vector<int>v=nums;
     sort (v.begin(),v.end());
     unordered_map<int,int>map;
     for(int i=0;i<v.size();i++){
        if (!map.count(v[i])){
            map[v[i]]=i;
        }
     }
     vector<int>ans;
     for(int num:nums){
        ans.push_back(map[num]);
     }
     return ans;
    }
};

Approach 3:

Tc = O(n)
sc = O(1) for bucket array
but O(n) for given array

code:
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
     vector<int>count(101,0);
     for (int num:nums){
        count[num]++;
     }     
     for(int i=1;i<101;i++){
        count [i]+=count [i-1];
     }
     vector<int>ans;
     for(int num:nums){
         if (num == 0) ans.push_back(0);
            else ans.push_back(count[num - 1]);
     }
     return ans;
    }
};
