Problem link : [https://leetcode.com/problems/relative-sort-array/description/]
Tag: Easy
Approach 1:

Tc = O(m*n+nlogn)
sc = O(n)

code:
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        vector <int>ans;
        for (int i=0;i<arr2.size();i++){
            for (int j=0;j<arr1.size();j++){
                if(arr2[i]==arr1[j]){
                    ans.push_back(arr1[j]);   
                    arr1[j]=-1;                 
                }
            }
        }
        vector <int>rest;
        for(int num:arr1){
            if(num!=-1)
            rest.push_back(num);
        }
        sort(rest.begin(),rest.end());
        ans.insert(ans.end(),rest.begin(),rest.end());
        return ans;

    }
};

Approach 2:counting sort 

Tc = O(n+k), where k is the size of the counting array 1001.so O(n)
sc = O(k), where k=1001 so O(1) 

code
class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        vector <int>ans;
        vector <int> count (1001,0);
        for(int num:arr1){
            count [num]++;
        }
        for (int num:arr2){
            while(count[num]>0){
                ans.push_back(num);
                count[num]--;
            }
        }
        for(int num =0; num<1001;num++){
            while (count[num]>0){
                ans.push_back(num);
                count[num]--;
            }
        }
        return ans;

    }
};
