Problem link : [ https://leetcode.com/problems/number-of-1-bits/description/ ] 
Tag: Easy
#Approach 1: using __builtin_popcount() 

Tc = O(1) //it for 32 bit 
sc = O(1)

#code:
class Solution {
public:
    int hammingWeight(int n) {
        return __builtin_popcount(n);
    }
};

#Approach 2: using n&1 and right shift

Tc = O(n) 
sc = O(1)

#code
class Solution {
public:
    int hammingWeight(int n) {
        int count = 0;
        while (n>0){
            count += n&1; //Check if the last bit is 1
            n=n>>1; //Shift right to check next bit
        }
        return count;
    }
};

#Approach 3: using Brian Kernighan's

Tc = O(logn) 
sc = O(1)

#code:
class Solution {
public:
    int hammingWeight(int n) {
        int count = 0;
        while (n>0){
            n=n&(n-1);
            count++;
        }
        return count;
    }
};
